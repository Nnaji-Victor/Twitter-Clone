{"ast":null,"code":"var _jsxFileName = \"/home/tanisk/twitter/client/src/Component/Context/Authorization/AuthState.js\";\nimport React, { useReducer } from 'react';\nimport AuthContext from './authContext';\nimport authReducer from './authReducer';\nimport axios from 'axios';\nimport setAuthToken from './setAuthToken';\nimport { prod_url } from '../../Config/url';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, CLEAR_ERRORS } from './types';\n\nconst AuthState = props => {\n  const initialState = {\n    token: localStorage.getItem('token'),\n    isAuthenticated: null,\n    loading: true,\n    error: null,\n    user: null\n  }; //  l -> Authstate -> signup -> authstate-> login\n\n  const [state, dispatch] = useReducer(authReducer, initialState); //........Load User Starts here\n\n  const loadUser = async () => {\n    if (localStorage.token) {\n      setAuthToken(localStorage.token);\n    }\n\n    try {\n      const res = await axios.get(`${prod_url}/api/v1/auth`);\n      console.log(res.data);\n      dispatch({\n        type: USER_LOADED,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: AUTH_ERROR\n      });\n    }\n  }; //........Register User Starts here\n\n\n  const register = async (formData, rest) => {\n    const {\n      state,\n      history\n    } = rest;\n    console.log('register-function -> ', rest); // To make a post request we need to get Content type header of postman\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n\n    try {\n      console.log(history);\n      const res = await axios.post(`${prod_url}/api/v1/users`, formData, config);\n      console.log(res.data); // /doct \n\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: res.data\n      });\n      history.push(\"/login\", {\n        state\n      }); // history.push({ pathname: \"/login\" })\n    } catch (err) {\n      console.log(err);\n      dispatch({\n        type: REGISTER_FAIL,\n        payload: err.response.data.msg\n      });\n    }\n  }; //.....\n\n\n  const login = async formData => {\n    // To make a post request we need to get Content type header of postman\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n\n    try {\n      const res = await axios.post(`${prod_url}/api/v1/auth`, formData, config);\n      console.log(res.data);\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: res.data\n      });\n      loadUser();\n    } catch (err) {\n      dispatch({\n        type: LOGIN_FAIL,\n        payload: err.response.data.msg\n      });\n    }\n  }; //........LogOut User Starts here\n\n\n  const logout = () => {\n    dispatch({\n      type: LOGOUT\n    });\n  }; //........Clear Error Starts here\n\n\n  const clearErrors = () => {\n    dispatch({\n      type: CLEAR_ERRORS\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(AuthContext.Provider, {\n    value: {\n      token: state.token,\n      isAuthenticated: state.isAuthenticated,\n      loading: state.loading,\n      user: state.user,\n      error: state.error,\n      register,\n      loadUser,\n      login,\n      logout,\n      clearErrors\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  }, props.children);\n};\n\nexport default AuthState;","map":{"version":3,"sources":["/home/tanisk/twitter/client/src/Component/Context/Authorization/AuthState.js"],"names":["React","useReducer","AuthContext","authReducer","axios","setAuthToken","prod_url","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","CLEAR_ERRORS","AuthState","props","initialState","token","localStorage","getItem","isAuthenticated","loading","error","user","state","dispatch","loadUser","res","get","console","log","data","type","payload","err","register","formData","rest","history","config","headers","post","push","response","msg","login","logout","clearErrors","children"],"mappings":"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","sourcesContent":["import React, { useReducer } from 'react'\nimport AuthContext from './authContext'\nimport authReducer from './authReducer'\nimport axios from 'axios'\nimport setAuthToken from './setAuthToken'\nimport { prod_url } from '../../Config/url'\n\nimport {\n    REGISTER_SUCCESS,\n    REGISTER_FAIL,\n    USER_LOADED,\n    AUTH_ERROR,\n    LOGIN_SUCCESS,\n    LOGIN_FAIL,\n    LOGOUT,\n    CLEAR_ERRORS\n} from './types'\n\nconst AuthState = (props) => {\n    const initialState = {\n        token: localStorage.getItem('token'),\n        isAuthenticated: null,\n        loading: true,\n        error: null,\n        user: null\n    }\n\n    //  l -> Authstate -> signup -> authstate-> login\n    const [state, dispatch] = useReducer(authReducer, initialState)\n\n    //........Load User Starts here\n    const loadUser = async () => {\n        if (localStorage.token) {\n            setAuthToken(localStorage.token)\n        }\n        try {\n            const res = await axios.get(`${prod_url}/api/v1/auth`)\n            console.log(res.data)\n            dispatch({\n                type: USER_LOADED,\n                payload: res.data\n            })\n        } catch (err) {\n            dispatch({\n                type: AUTH_ERROR\n            })\n        }\n    }\n\n    //........Register User Starts here\n    const register = async (formData, rest) => {\n        const { state, history } = rest\n        console.log('register-function -> ', rest)\n\n        // To make a post request we need to get Content type header of postman\n        const config = {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }\n        try {\n            console.log(history)\n            const res = await axios.post(`${prod_url}/api/v1/users`, formData, config)\n            console.log(res.data)\n            // /doct \n            dispatch({\n                type: REGISTER_SUCCESS,\n                payload: res.data\n            })\n\n            history.push(\"/login\", { state });\n            // history.push({ pathname: \"/login\" })\n        } catch (err) {\n            console.log(err)\n            dispatch({\n                type: REGISTER_FAIL,\n                payload: err.response.data.msg\n            })\n        }\n    }\n\n\n\n    //.....\n\n    const login = async formData => {\n        // To make a post request we need to get Content type header of postman\n        const config = {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }\n        try {\n            const res = await axios.post(`${prod_url}/api/v1/auth`, formData, config)\n            console.log(res.data)\n            dispatch({\n                type: LOGIN_SUCCESS,\n                payload: res.data\n            })\n            loadUser();\n\n        } catch (err) {\n            dispatch({\n                type: LOGIN_FAIL,\n                payload: err.response.data.msg\n            })\n        }\n    }\n\n\n    //........LogOut User Starts here\n    const logout = () => {\n        dispatch({ type: LOGOUT })\n    }\n\n    //........Clear Error Starts here\n    const clearErrors = () => {\n        dispatch({ type: CLEAR_ERRORS })\n    }\n\n    return (\n        <AuthContext.Provider value={{\n            token: state.token,\n            isAuthenticated: state.isAuthenticated,\n            loading: state.loading,\n            user: state.user,\n            error: state.error,\n            register,\n            loadUser,\n            login,\n            logout,\n            clearErrors\n        }}>\n            {props.children}\n\n        </AuthContext.Provider>\n    )\n}\n\nexport default AuthState"]},"metadata":{},"sourceType":"module"}